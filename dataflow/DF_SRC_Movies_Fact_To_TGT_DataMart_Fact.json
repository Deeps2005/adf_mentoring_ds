{
	"name": "DF_SRC_Movies_Fact_To_TGT_DataMart_Fact",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_ASQL_tOnlinePurchase",
						"type": "DatasetReference"
					},
					"name": "tOnlinePurchase"
				},
				{
					"dataset": {
						"referenceName": "DS_ASQL_tOnlineService",
						"type": "DatasetReference"
					},
					"name": "tOnlineService"
				},
				{
					"dataset": {
						"referenceName": "DS_ASQL_DimOnlineService",
						"type": "DatasetReference"
					},
					"name": "DimOnlineService"
				},
				{
					"dataset": {
						"referenceName": "DS_ASQL_tMovies",
						"type": "DatasetReference"
					},
					"name": "tMovies"
				},
				{
					"dataset": {
						"referenceName": "DS_ASQL_DimMovie",
						"type": "DatasetReference"
					},
					"name": "DimMovies"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_ASQL_FactOnlinePurchase",
						"type": "DatasetReference"
					},
					"name": "FactOnlinePurchase"
				},
				{
					"dataset": {
						"referenceName": "DS_ASQL_FactOnlinePurchase_MonthlySnapshot",
						"type": "DatasetReference"
					},
					"name": "FactOnlinePurchaseMonthlySnapshot"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn"
				},
				{
					"name": "lookup"
				},
				{
					"name": "Join"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "select1"
				},
				{
					"name": "DerivedMonthKey"
				},
				{
					"name": "aggregatePurchaseAmountQuantity"
				},
				{
					"name": "join3"
				},
				{
					"name": "lookup2"
				},
				{
					"name": "join4"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Id as integer,",
				"          ServiceId as integer,",
				"          MovieId as integer,",
				"          UserId as integer,",
				"          Price as decimal(4,1),",
				"          TransactionId as string,",
				"          TransactionDate as timestamp,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp,",
				"          SrcFileName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tOnlinePurchase",
				"source(output(",
				"          ServiceId as integer,",
				"          ServiceCode as string,",
				"          ServiceName as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tOnlineService",
				"source(output(",
				"          ServiceKey as integer,",
				"          ServiceCode as string,",
				"          ServiceName as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimOnlineService",
				"source(output(",
				"          MovieId as integer,",
				"          MovieIdNK as integer,",
				"          Budget as integer,",
				"          HomepagePath as string,",
				"          Title as string,",
				"          OriginalTitle as string,",
				"          ReleaseDate as date,",
				"          Revenue as long,",
				"          Runtime as integer,",
				"          MovieStatusId as integer,",
				"          AvgVote as decimal(3,1),",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp,",
				"          SrcFileName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tMovies",
				"source(output(",
				"          MovieKey as integer,",
				"          MovieIdNK as integer,",
				"          Title as string,",
				"          ReleaseDate as date,",
				"          Runtime as integer,",
				"          MovieStatus as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimMovies",
				"tOnlinePurchase derive(TransactionDate = toInteger(toString(TransactionDate, 'YYYYMMdd'))) ~> derivedColumn",
				"derivedColumn, tOnlineService lookup(tOnlinePurchase@ServiceId == tOnlineService@ServiceId,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup",
				"lookup, DimOnlineService join(tOnlineService@ServiceName == DimOnlineService@ServiceName,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> Join",
				"derivedColumn, tMovies lookup(tOnlinePurchase@MovieId == tMovies@MovieId,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1, DimMovies join(tMovies@MovieIdNK == DimMovies@MovieIdNK,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"select1, join1 join(select1@Id == tOnlinePurchase@Id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"Join select(mapColumn(",
				"          Id,",
				"          ServiceId = tOnlinePurchase@ServiceId,",
				"          MovieId,",
				"          UserId,",
				"          Price,",
				"          TransactionId,",
				"          TransactionDate,",
				"          CreatedDate = tOnlinePurchase@CreatedDate,",
				"          ModifiedDate = tOnlinePurchase@ModifiedDate,",
				"          SrcFileName,",
				"          ServiceId = tOnlineService@ServiceId,",
				"          ServiceCode = tOnlineService@ServiceCode,",
				"          ServiceName = tOnlineService@ServiceName,",
				"          CreatedDate = tOnlineService@CreatedDate,",
				"          ModifiedDate = tOnlineService@ModifiedDate,",
				"          ServiceKey,",
				"          ServiceCode = DimOnlineService@ServiceCode,",
				"          ServiceName = DimOnlineService@ServiceName,",
				"          CreatedDate = DimOnlineService@CreatedDate,",
				"          ModifiedDate = DimOnlineService@ModifiedDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"tOnlinePurchase derive(TransactionDate = toInteger(toString(TransactionDate,'YYYYMM'))) ~> DerivedMonthKey",
				"DerivedMonthKey aggregate(groupBy(TransactionDate),",
				"     PurchaseAmount = sum(Price),",
				"          PurchaseQuantity = count(TransactionId)) ~> aggregatePurchaseAmountQuantity",
				"aggregatePurchaseAmountQuantity, join4 join(aggregatePurchaseAmountQuantity@TransactionDate == DerivedMonthKey@TransactionDate,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"DerivedMonthKey, tOnlineService lookup(tOnlinePurchase@ServiceId == tOnlineService@ServiceId,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup2",
				"lookup2, DimOnlineService join(tOnlineService@ServiceName == DimOnlineService@ServiceName,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join2 sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          DateKey as integer,",
				"          OnlineServiceKey as integer,",
				"          MovieKey as integer,",
				"          Price as decimal(4,1),",
				"          TransactionId as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     preSQLs:['truncate table [dbo].[FactOnlinePurchase];'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          DateKey = select1@TransactionDate,",
				"          OnlineServiceKey = ServiceKey,",
				"          MovieKey,",
				"          Price = select1@Price,",
				"          TransactionId = select1@TransactionId",
				"     )) ~> FactOnlinePurchase",
				"join3 sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          MonthKey as integer,",
				"          OnlineServiceKey as integer,",
				"          PurchaseAmount as decimal(10,1),",
				"          PurchaseQuantity as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     preSQLs:['truncate table dbo.FactOnlinePurchase_MonthlySnapshot;'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          MonthKey = DerivedMonthKey@TransactionDate,",
				"          OnlineServiceKey = ServiceKey,",
				"          PurchaseAmount,",
				"          PurchaseQuantity",
				"     )) ~> FactOnlinePurchaseMonthlySnapshot"
			]
		}
	}
}